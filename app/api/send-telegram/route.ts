import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7459013983:AAEDMBiXJYu3qf__pWta2mIUdjmyTgwqS-I'
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '944549036'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª (fallback)
function saveToFile(data: any) {
  try {
    const dataDir = path.join(process.cwd(), 'public', 'submissions')
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true })
    }
    
    const filename = `submission_${Date.now()}.json`
    const filepath = path.join(dataDir, filename)
    
    fs.writeFileSync(filepath, JSON.stringify({
      ...data,
      timestamp: new Date().toISOString(),
      received: true
    }, null, 2))
    
    return true
  } catch (error) {
    console.error('Error saving to file:', error)
    return false
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, projectType, budget, message } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !message) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>

üë§ <b>–ò–º—è:</b> ${name}
üìß <b>Email:</b> ${email}
üìÅ <b>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</b> ${projectType || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' })}
    `.trim()

    let telegramSuccess = false
    let telegramError = null

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    try {
      const telegramResponse = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: 'HTML',
          }),
        }
      )

      const telegramData = await telegramResponse.json()

      if (telegramResponse.ok) {
        telegramSuccess = true
      } else {
        telegramError = telegramData.description || 'Unknown error'
        console.error('Telegram API error:', telegramData)
      }
    } catch (error) {
      telegramError = error instanceof Error ? error.message : 'Connection error'
      console.error('Error connecting to Telegram:', error)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–∞–∫ fallback
    const fileSaved = saveToFile(body)

    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å—Ä–∞–±–æ—Ç–∞–ª - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    if (telegramSuccess || fileSaved) {
      return NextResponse.json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
        telegramSent: telegramSuccess,
        fileSaved: fileSaved,
      })
    }

    // –ï—Å–ª–∏ –æ–±–∞ —Å–ø–æ—Å–æ–±–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    return NextResponse.json(
      {
        error: 'Failed to send message',
        details: telegramError,
      },
      { status: 500 }
    )
  } catch (error) {
    console.error('Error processing request:', error)
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}
